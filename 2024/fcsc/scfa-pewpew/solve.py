from collections import defaultdict
from random import randint
from pwn import remote, context
context.log_level = 'debug'

m=11000385076366155543686602566826962197402983340089307695553580780105
s=18962429263192645526305680665763484429577957638428187003683390796627580352205402604620327713258597128411719979664509589968995310300475974994356220357685749341819888245617222506328416963267491087587463659719187458306564956921818250742333392122648312894382059757506125060161919911662436041803329165982926810607262336418332200102453606157204782027098912933792680599417570403337975083110823925157618130910159499382875706286784526229054270311555577046798199165648509189501482158751781932961339772799314718154992469620427812193544305551042787071224140049609325208073427588836037555259053047870545370550851596954349203386759

t=26258623547203513697887918165091143626235559659987580605928339025597198797899810690384227382874432259004621477338470270416691925206835901258531423673971708712252917855914054901321880446602889350976498911424835981935726830263978757600870090688953064577577667743027329081428778965117346300115630318217907634577056519115613283919091241826705289844375504419274505865452693329437819223943254935127915240767050288400325061853927697309724990430657682012018079356627051020296301959444530536607699024464728382697155475936960818822999022822978172834029368076191515945646081482036045124323105171544047631639939013385038747030946

e=65537
n=29723264079986215319697574879934925573509414976692301854224250215998586272410185666021346929254319814873329244463632333006589159404681144820675551761036409220919636817973350023893977849992024759182581844968961148497208948643975960671026820840214020697592193560830372435555745113199854458884881565222580747588184026055492357877726484347771247670853173071515998730235141777939194035757029664296031912045487519122042100342979352689438965631012034847910246276251453559899471593480690138363932498671962638832194411073192586229328573030694683854262692564995409859674385149066337594511034282856188148772025182554282129835129

c=14419775330701350977326046060604915284545811127370044976471899407808699099913937811112590431840639129588607870863674235701487299192915687066069038438265961742631045389848134864443341701453453965991351738542060599450444691793483359477632477896501600614115175766362577271028646056088243947285873751515823627886977738245623327186724933935092153415494288246658348798135744056340404961393104567239595543802472451725831973259433824065308839511523393773680865966311132180367345277413870767551136634260839209416406806655163117636481983652742838953137257513828904668361064133757187923253979114873944618649942363696690557623912


def target(i):
    io.sendlineafter(b'target (1 or 2): ', str(i).encode())
def send(msg):
    io.sendlineafter(b': ', str(msg).encode())
def recv():
    return io.recvline(False).decode()

COUNT = 20

io = remote('challenges.france-cybersecurity-challenge.fr', '2350')

data = defaultdict(lambda:[0,0,[]])

for X in range(5, 10):
    for Y in range(5, 10):
        target(2)
        send(X)
        send(Y)
        send(150)            # voltage
        send(offset := randint(1,199)) # offset
        send(COUNT)          # count
        recv()
        for _ in range(COUNT):
            line = recv()
            if 'signature complete, you can verify with the following parameters: m=11000385076366155543686602566826962197402983340089307695553580780105, s=18962429263192645526305680665763484429577957638428187003683390796627580352205402604620327713258597128411719979664509589968995310300475974994356220357685749341819888245617222506328416963267491087587463659719187458306564956921818250742333392122648312894382059757506125060161919911662436041803329165982926810607262336418332200102453606157204782027098912933792680599417570403337975083110823925157618130910159499382875706286784526229054270311555577046798199165648509189501482158751781932961339772799314718154992469620427812193544305551042787071224140049609325208073427588836037555259053047870545370550851596954349203386759' in line: data[X,Y][0] += 1
            elif 'execution went astray, waiting 100ms for reset' in line: data[X,Y][1] += 1
            else: data[X,Y][2].append((offset, line))

print('='*100)
for X in range(5, 10):
    for Y in range(5, 10):
        row = data[X,Y]
        print(f'--- {X = } --- {Y = }')
        print('expected:', row[0])
        print('crash:', row[1])
        if row[2]:
            print('SOMETHING ELSE???')
            print(row[2])