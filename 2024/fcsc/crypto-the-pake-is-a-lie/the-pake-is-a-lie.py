import os
import string
from random import randrange
from hashlib import sha256

PASSWORD = os.getenv("PASSWORD", "fake")

class Server:
    def __init__(self, password):
        # Parameters
        self.p = 99126081498110679622117208839946568977975346033127530222404078981480201164078403345496146296949856728918789240336343638617422048283132242454464446291492611584384751501785383357838317732828318093759885347973087134144406693627357857330950504134924555608896346799104280246597972464783116857557440201146239820962614737545356185926303055992966419563962391182588280591946549056511488286585225437441847723071671691983100789423850862625728681245227608953095286385917258671161510940257372122458091056338357381929396029892868891726999599401117716948670950295974901401487901706396092675230119537481992404521806171202857131482218447629266273659693800992655608637431138440796299719773966019160861946691736898018974264372149526585927739463345353811003110493041611686230570445853159167671930184015631656166581888140313132779812582289364648438529584403147703014843916154647757047547530701247017078776589293631650327878203453320557338297607
        self.q = 219417094215275962897891584141934286732289959275399446266197828228881499677887
        self.gen_p = 5
        self.gen_q = 72154714647924720796474763306018150527191193551579074454752226970361323910715225761684479052710319044131664417748053567305559594047843955631623493511776191150761624423057712199333695861546969039213115324133903199540888607688395526099308852693693849968497163766267565896327807964016029443580636143801729508911217765863848341671551118348011046973222684768978887554468357759171837184458551001147236382457538449300832986979798907732863289077628954566687210037771632552199142257829844076857480798150476647417848684957787136264909313143902413998900899314654316452799924876033142970490676851821804729747044276455816438355824263753284809574944174976279150615425997612511094163023294534830728406472125525906164174075985781960904415647895164715282031620157048260175517210288249757399650428148616065918428303867923400176690656556468547499914734843233868999940689417190530787085270228716948016475608585812032578630717685685190825328784
        self.key = int(sha256(password.encode()).digest().hex(), 16)

    def init_DH(self):
        self.x = randrange(2, self.q)        # x: 0 < rand < q
        X = pow(self.gen_q, self.x, self.p)  # X = gq^x  mod p
        Xenc = self._encrypt(X)              # Xenc = X * gp^k  mod p
        return Xenc

    def _encrypt(self, m):
        return m * pow(self.gen_p, self.key, self.p) % self.p    # c = m * gp^k  mod p

    def _decrypt(self, c):
        return c * pow(self.gen_p, -self.key, self.p) % self.p   # m = c * gp^-k mod p

    def complete_DH(self, Y_enc):
        Y = self._decrypt(Y_enc)            # Y = Yenc * gp^-k          mod p
        self.K = pow(Y, self.x, self.p)     # K = Y^x = Yenc^x * gp^-kx mod p
        self.H = sha256(hex(self.K).encode() + b"Server").digest().hex()
        return self.H
        
    def check_DH(self, your_H):
        return your_H == sha256(hex(self.K).encode() + b"Client").digest().hex()

assert len(PASSWORD) == 4
assert all(x in string.ascii_lowercase for x in PASSWORD)

S = Server(PASSWORD)
Xenc = S.init_DH()
print(f"{Xenc = }")

try:
    print("Input your part of the Diffie-Hellman exchange (integer mod p):")
    Y_enc = int(input(">>> "))

    H = S.complete_DH(Y_enc)
    print(f"{H = }")

    print('Input the hash of the shared key concatenated with "Client" (hex format)')
    your_H = input(">>> ")

    if S.check_DH(your_H):
        print("Connection established!")
    else:
        print("Not quite, try again!")
except:
    print("Check your inputs.")
