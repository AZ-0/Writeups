

# This file was *autogenerated* from the file symanalysis.sage
from sage.all_cmdline import *   # import sage library

_sage_const_4 = Integer(4); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_10 = Integer(10); _sage_const_5 = Integer(5); _sage_const_50 = Integer(50); _sage_const_64 = Integer(64); _sage_const_60 = Integer(60); _sage_const_100 = Integer(100); _sage_const_25 = Integer(25); _sage_const_1000 = Integer(1000)
def symxor(x, y):
    return [a+b for a,b in zip(x,y)]

def symround(x, t):
    y = [None]*_sage_const_4 
    y[_sage_const_0 ] = x[_sage_const_0 ] + t
    y[_sage_const_1 ] = x[_sage_const_1 ] + y[_sage_const_0 ]
    y[_sage_const_2 ] = x[_sage_const_2 ] + y[_sage_const_1 ]
    y[_sage_const_3 ] = x[_sage_const_3 ] + y[_sage_const_2 ]
    return y

def symexpand(k):
    rk = [k]
    for i in range(_sage_const_10 ):
        rk.append(symround(rk[-_sage_const_1 ], ts[i]))
    return rk

def symenc(p, rk):
    c = p[:]
    for i, sk in enumerate(rk[:-_sage_const_1 ]):
        c = symxor(c, sk)
        for j in range(_sage_const_5 ):
            c = symround(c, ss[_sage_const_5 *i+j])
    return symxor(c, rk[-_sage_const_1 ])

def vars(*args):
    names = args[::_sage_const_2 ]
    ns = args[_sage_const_1 ::_sage_const_2 ]
    return ','.join(
        ','.join(
            f"{name}{i:0>2}"
            for i in range(n)
        )
        for name, n in zip(names, ns)
    )


p  = bytes.fromhex("0dfa4c6052fb87ef0a8f03f705dd5101")
c  = bytes.fromhex("d4ed19e0694101b6b151e11c2db973bf")
iv = bytes.fromhex("cd31cb6e6ded184efbb9a398e31ffdbb")
flag_enc = bytes.fromhex("653ec0cdd7e3a98c33414be8ef07c583d87b876afbff1d960f8f43b5a338e9ff96d87da4406ebe39a439dab3a84697d40c24557cd1ea6f433053451d20ce1fbf191270f4b8cc7891f8779eb615d35c9f")

R = GF(_sage_const_2 )[vars('p',_sage_const_4 , 'x',_sage_const_4 , 't',_sage_const_10 , 's',_sage_const_50 )]
ps = R.gens()[:_sage_const_4 ]
xs = R.gens()[-_sage_const_64 :-_sage_const_60 ]
ts = R.gens()[-_sage_const_60 :-_sage_const_50 ]
ss = R.gens()[-_sage_const_50 :]

rk = symexpand(xs)
symc = symenc(ps, rk)
for ci in symc:
    print('-'*_sage_const_50 )
    print(ci)


print('*'*_sage_const_100 )

M = matrix(ZZ, [
    [ci.monomial_coefficient(gi) for gi in R.gens()]
    for ci in symc
]).LLL().change_ring(GF(_sage_const_2 ))
print(M)

g = vector(R, R.gens())
V = GF(_sage_const_2 )**R.ngens()

for v in M.row_space():
    w = sum(map(int, v))
    if w < _sage_const_25 :
        print(w, '|', g * V(v))

print('\n'+'*'*_sage_const_100 +'\n')

for i, ki in enumerate(rk):
    print('-'*_sage_const_50 )

    M = matrix(QQ, [
        [ci.monomial_coefficient(gi) for gi in R.gens()]
        for ci in ki
    ]).augment(matrix.identity(QQ, _sage_const_4 )).dense_matrix()

    D = matrix.diagonal(QQ, [_sage_const_1000 ]*R.ngens() + [_sage_const_1 ]*_sage_const_4 )
    M = ((M*D).LLL()/D).change_ring(GF(_sage_const_2 ))

    for v in M:
        w = sum(map(int, v[:-_sage_const_4 ]))
        eq = ' + '.join(f'k{_sage_const_4 -i}' if v[-i] else ' 0' for i in range(_sage_const_1 ,_sage_const_5 ))
        print(w, '|', eq, '=', g * V(v[:-_sage_const_4 ]))

